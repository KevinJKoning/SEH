---
title: "Observable Dice Rolling"
format: html
---

```{ojs}
// Inputs
const numDice = Inputs.number({ value: 2, min: 1, max: 10, label: "Number of Dice:" });
const numRolls = Inputs.slider({ value: 100, min: 1, max: 10000, label: "Number of Rolls:" });
const rollButton = Inputs.button("Roll the Dice!");

// Reactive Data (using a reactive value for better practice)
const diceSums = reactive(null);

// Roll Logic (using an observer to react to button clicks)
const runtime = new observablehq.Runtime();
const module = runtime.module();

module.input("numDice", numDice);
module.input("numRolls", numRolls);

module.define("diceSums", ["numDice", "numRolls", "rollButton"], (numDice, numRolls, rollButton) => {
  if (rollButton) { // Check if the button was clicked
    const rolls = Array.from({ length: numRolls });
    rolls.fill(0).forEach((_, i) => rolls[i] = Array.from({ length: numDice })
      .map(() => Math.floor(Math.random() * 6) + 1)
      .reduce((a, b) => a + b));
    diceSums.set(rolls);
  }
  return diceSums();
});

// Display Functions
function displayTextOutput() {
  const sums = diceSums();
  return sums === null ? "No dice rolled yet!" : sums.join(", ");
}

function plotDiceDistribution() {
  const sums = diceSums();
  if (sums === null) return null;
  const data = sums.map(sum => ({ total: sum }));

  return Plot.plot({
    x: { domain: [Math.min(...sums), Math.max(...sums)]},
    y: { grid: true},
    marks: [
      Plot.barY(data, Plot.binX({y: "count"}, {x: "total", fill: "steelblue"})),
      Plot.ruleY([0])
    ],
    marginTop: 30,
    marginLeft: 50,
    marginBottom: 30
  });
}

// Render the inputs
numDice
numRolls
rollButton

// Reactivity for Display Update
const updateDisplay = viewof(() => {
  sumsText.textContent = displayTextOutput();
  const plot = plotDiceDistribution();
  dicePlot.innerHTML = ""; // Clear the previous plot
  if (plot) dicePlot.appendChild(plot);
});

diceSums.subscribe(updateDisplay); // Subscribe to automatically update
```