---
title: "Test of new Dice Rolling App"
format: html
filters:
  - shinylive
---

## Probability of a Data Generating Process

If we assume a certain model of a data generating process - but it never seems to generate any data close the what is observed from the real data generating process, we can conclude that the model is bad.


```{shinylive-python}
#| standalone: true
#| viewerHeight: 650

from shiny import App, ui, render, reactive
import numpy as np
import matplotlib.pyplot as plt

app_ui = ui.page_fluid(
    ui.h2("Dice Rolling Demo"),
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("numDice", "Number of Dice", min=1, max=10, value=2, step=1),
            ui.input_slider("numRolls", "Number of Rolls", min=1, max=10000, value=100, step=1),
        ),
        ui.output_plot("dicePlot", height="400px"),
    ),
    ui.row(
        ui.column(4,
            ui.input_select("selectedTotal", "Select Dice Total", choices=[""])
        ),
        ui.column(8,
            ui.output_text("probability")
        )
    )
)

def server(input, output, session):
    # Define a reactive calculation that depends on numDice and numRolls
    @reactive.Calc
    def dice_sums():
        return [
            np.random.randint(1, 7, input.numDice()).sum()
            for _ in range(input.numRolls())
        ]

    # Update the choices in the select input based on the current dice sums
    @reactive.Effect
    def _():
        current_sums = dice_sums()
        unique_sums = sorted(np.unique(current_sums))
        ui.update_select(
            "selectedTotal",
            choices=[str(s) for s in unique_sums],
            selected=str(unique_sums[0]) if len(unique_sums) > 0 else ""
        )

    @output
    @render.plot
    def dicePlot():
        current_sums = dice_sums()
        fig, ax = plt.subplots()

        unique_sums, counts = np.unique(current_sums, return_counts=True)
        ax.bar([str(s) for s in unique_sums], counts, color="steelblue")

        ax.set_title("Frequency of Dice Totals")
        ax.set_xlabel("Dice Total")
        ax.set_ylabel("Frequency")
        plt.xticks(rotation=90)

        return fig

    @output
    @render.text
    def probability():
        if not input.selectedTotal():
            return "\nPlease select a dice total"
        
        current_sums = dice_sums()
        selected_total = int(input.selectedTotal())
        count = sum(1 for x in current_sums if x == selected_total)
        prob = count / len(current_sums)
        
        return f"\nApproximate probability of rolling a total of {selected_total}: {prob:.4f}"

app = App(app_ui, server)
```